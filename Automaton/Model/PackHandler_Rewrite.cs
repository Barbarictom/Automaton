using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Automaton.Model
{
    class PackHandler_Rewrite
    {
        public static ModPack ModPack { get; set; }

        public static string ModPackLocation { get; set; }
        public static string SourceLocation { get; set; }
        public static string InstallationLocation { get; set; }

        /// <summary>
        /// Reads the targeted file for valid JSON and converts it to a ModPack object. This is save within the PackHandler
        /// </summary>
        public static ModPack ReadPack()
        {
            if (!File.Exists(ModPackLocation))
            {
                return null;
            }

            var tempDirectory = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "temp");

            // Unzip the file into the temporary directory
            using (var sevenZipHandler = new SevenZipHandler(ModPackLocation))
            {
                var extractedModPackName = Path.GetFileNameWithoutExtension(ModPackLocation);
                var extractedModPackPath = Path.Combine(tempDirectory, extractedModPackName);

                var packFileLocation = Path.Combine(extractedModPackPath, "modpack.json");

                if (!File.Exists(packFileLocation))
                {
                    return null;
                }

                var modPackContents = File.ReadAllText(packFileLocation);

                try
                {
                    ModPack = JsonConvert.DeserializeObject<ModPack>(modPackContents);

                    return ModPack;
                }

                catch (Exception e)
                {
                    throw new Exception(e.Message);
                }
            }
        }

        /// <summary>
        /// Validate the source mod location for all required mod files, as generated by the optionals list.
        /// </summary>
        public static List<Mod> ValidateSourceLocation()
        {
            var files = Directory.GetFiles(SourceLocation);
            var fileSizes = files.Select(x => new FileInfo(x).Length);
            var modPack = ModPack;
            var missingMods = new List<Mod>();

            foreach (var mod in modPack.Mods)
            {
                // Gets files from sourceLocation which match the size of the modPack mod
                var filteredFileSizes = fileSizes.Where(x => x.ToString() == mod.FileSize);

                if (filteredFileSizes.Count() == 0)
                {
                    missingMods.Add(mod);
                }
            }

            return missingMods;
        }

        /// <summary>
        /// Installs the mod pack into the installation location.
        /// </summary>
        public static void InstallModPack()
        {

        }
    }
}
